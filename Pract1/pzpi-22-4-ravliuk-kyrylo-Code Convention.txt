Харківський університет радіоелектроніки Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ

з практичного заняття №1 
з дисципліни  «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»






Виконав ст. гр ПЗПІ-22-4

Равлюк Кирило Станіславович



Перевірив

ст. викладач кафедри ПІ Сокорчук Ігор Петрович




Харків 2024

МЕТА РОБОТИ
	Головна мета практичного занняття це - ознайомитися з основними принципами написання чистого, зрозумілого та ефективного коду на мові Lua. Навчитися застосовувати кращі практики для забезпечення читабельності та підтримуваності програмного коду, включно з використанням відповідних конвенцій і структур для полегшення командної роботи та зменшення складності. 

ВСТУП
Lua — сучасна, легка, швидка та потужна мова програмування, створена у 1993 році групою бразильських розробників на кафедрі обчислювальної математики та інформаційних наук Бенґу-Уфі. Її розробили для вбудованих систем, щоб розширювати функціональність додатків без змін основного коду. Завдяки відкритій ліцензії та активній спільноті, Lua стала популярною в ігровій індустрії, веб-розробці, скриптингу для програмного забезпечення та вбудованих систем. 
Основні рекомендації для написання коду на Lua включають: дотримання єдиного стилю коду (використання snake_case), створення простих функцій, використання локальних змінних для уникнення конфліктів, оптимізацію структури коду шляхом розділення на модулі або функції, застосування метатаблиць для організації об'єктно-орієнтованого програмування, обробку помилок через pcall і xpcall, уникнення глобальних змінних та тестування продуктивності за допомогою LuaJIT або інших інструментів. Також рекомендується документувати код і дотримуватись принципу мінімалізму, забезпечуючи ефективність і лаконічність. 
На сьогодні, Lua застосовується в ігрових двигунах (Corona SDK, Defold, Roblox), вбудованих системах (мікроконтролери, IoT), веб-розробці (OpenResty) та автоматизації (Adobe Lightroom, World of Warcraft), де вона допомагає швидко розробляти і налаштовувати різні рішення. Крім того, Lua відзначається високою швидкістю виконання завдяки компіляторам типу LuaJIT, що дозволяє використовувати її для ресурсоємних завдань.

ХІД РОБОТИ
РЕКОМЕНДАЦІЇ ОФОРМЛЕННЯ КОДУ

Перша рекомендація: Уникайте назви змінних з однієї літери
Слід уникати назв змінних з однієї літери, за винятком дуже малих областей видимості (менше десяти рядків) або для ітераторів.i слід використовувати лише як змінну-лічильник у циклах for (числових for або ipairs).
Приклад:
-- Поганий приклад
local a = 10
local b = 20
local c = a + b

-- Гарний приклад
local first_number = 10
local second_number = 20
local sum = first_number + second_number

Друга рекомендація: Для найменування змінних та функцій використовуйте нотацію snake_case
	Використання нотації snake_case для імен змінних та функцій є важливим аспектом підтримання єдності та читабельності коду. Ця практика допомагає легко розпізнавати змінні і функції, а також підвищує зрозумілість коду для інших розробників, які можуть працювати з ним. Нотація snake_case передбачає написання слів у нижньому регістрі, розділених підкресленнями, що робить їх більш читабельними, особливо коли імена є довгими або складаються з кількох слів.
Приклад:
-- Поганий приклад
local myVariable = 10 
local MyVariable = 20 
function CalculateSum(a, b)
return a + b 
end

-- Гарний приклад
local my_variable = 10 
local my_second_variable = 20 
function calculate_sum(a, b) 
return a + b 
end

Третя рекомендація: Надавайте перевагу використанню is_ для іменування булевих функцій.
Використання префікса is_ для іменування булевих функцій є корисною практикою, оскільки вона чітко вказує на те, що функція повертає логічне значення (true або false). Це полегшує читабельність коду та допомагає іншим розробникам швидко зрозуміти мету функції. Таке іменування забезпечує єдину структуру для булевих функцій, що полегшує їх виявлення та використання.
Приклад:
-- Поганий приклад
function checkValue(value) 
return value > 10 
end
function isGreaterThanTen(value) 
return value > 10 
end

-- Гарний приклад
function is_value_greater_than_ten(value) 
return value > 10 
end 
function is_user_authenticated(user) 
return user.is_authenticated 
end

Четверта рекомендація: Назви класів повинні використовувати регістр CamelCase
	Використання регістру CamelCase для назв класів є важливою практикою, що забезпечує чіткість та узгодженість у вашому коді. CamelCase передбачає написання слів без пробілів або підкреслень, причому кожне слово починається з великої літери. Це дозволяє легко розрізняти класи від інших типів змінних та функцій, що спрощує читання та підтримку коду.
Приклад:
-- Поганий приклад
local myclass = {}
function myclass:new()
    local instance = {}
    setmetatable(instance, self)
    self.__index = self
    return instance
end

-- Гарний приклад
local MyClass = {}
function MyClass:new()
    local instance = {}
    setmetatable(instance, self)
    self.__index = self
    return instance
end


П’ята рекомендація: Уникайте скорочень в найменуванні класів
Використання повних слів при найменуванні класів є важливою практикою, оскільки це підвищує зрозумілість та читабельність коду. Скорочення або абревіатури можуть бути незрозумілі або непізнавані для інших розробників, що ускладнює підтримку та розширення коду в майбутньому. Тому рекомендується використовувати повні назви, які чітко описують функцію або роль класу.
Приклад:
-- Поганий приклад
local usrMgr = {}
function usrMgr:addUser(name)
    print("User added: " .. name)
end

-- Гарний приклад
local user_manager = {}
function user_manager:add_user(name)
    print("User added: " .. name)
end

Шоста рекомендація: використовуйте відступи в три пробіли
У LuaRocks рекомендується використовувати відступи в три пробіли. Цей стиль слугує компромісом між популярними стилями, що використовують два і чотири пробіли. Використання трьох пробілів дозволяє створити візуально приємні "сходи" для закриття блоків, оскільки мова Lua часто використовує конструкції з блоками do та end.
Приклад:
-- Поганий приклад форматування
for i, pkg in ipairs(packages) do
    for name, version in pairs(pkg) do
    if name == searched then
          print(version)
      end
    end
end

-- Гарний приклад форматування
for i, pkg in ipairs(packages) do
    for name, version in pairs(pkg) do
       if name == searched then
          print(version)
       end
    end
 end

Сьома рекомендація: Правильно використовуйте відступи та табуляцію
Важливо не змішувати табуляції та пробіли для відступів. Використання різних форматів відступів може призвести до неузгодженості та плутанини, особливо при спільній роботі над проектами. Рекомендується дотримуватись одного стилю в рамках проекту. Щодо закінчення рядків, у Lua також рекомендується використовувати LF (Unix) для забезпечення однорідності у форматуванні коду та уникнення проблем із сумісністю, особливо якщо проект може бути розроблений на різних операційних системах.
Приклад:
-- Поганий приклад (змішування пробілів і табуляцій)
function exampleFunction()
    →local x = 10   -- (тут використано табуляцію)
        local y = 20 -- (тут використано пробіли)
        return x + y
    end
    
-- Гарний приклад (використання одного стилю відступів)
function example_function()
        local x = 10   -- (використано лише пробіли для відступу)
        local y = 20
        return x + y
    end

Восьма рекомендація: уникнайте глобальних змінних
Уникнення глобальних змінних — ще один важливий аспект написання якісного коду. Використання локальних змінних замість глобальних прискорює доступ до них і зменшує ризик конфліктів, особливо в великих проектах, де може бути безліч функцій та модулів.
Приклад:
-- Поганий приклад (використання глобальних змінних)
myGlobalVariable = 10  -- (глобальна змінна)

function updateGlobal()
    myGlobalVariable = myGlobalVariable + 5
end

-- Гарний приклад (використання локальних змінних)
local my_local_variable = 10  -- (локальна змінна)

function updateLocal()
    my_local_variable = my_local_variable + 5
end

Дев’ята рекомендація: уникайте дублювання коду
Важливо забезпечити модульність, розділяючи код на логічні модулі, а також уникати дублювання, визначаючи повторювані фрагменти коду в окремих функціях або модулях (дотримуйтесь принципу DRY - Don't Repeat Yourself).
Приклад:
-- Поганий приклад дотримання принципів рефакторингу: повторюваний код, неясні імена та відсутність коментарів
function calc_area(length, width)
    return length * width
end

function calc_area2(length, width)
    return length * width
end

result1 = calc_area(5, 10)
result2 = calc_area2(7, 3)

-- Гарний приклад дотримання принципів рефакторингу: уникнення дублювання, описові імена, коментарі
function calculate_area(length, width)
    return length * width
end
local rectangle_area = calculate_area(5, 10)
local square_area = calculate_area(7, 7)  -- Використання тієї ж функції для обчислення площі квадрата

Десята рекомендація: Уникайте використання таблиць як глобальних змінних
Уникайте використання таблиць як глобальних змінних, оскільки це може знизити продуктивність програми. Замість цього намагайтеся використовувати локальні змінні для покращення швидкості доступу до даних. Глобальні таблиці можуть призвести до конфліктів і ускладнити налагодження коду, оскільки можуть бути змінені в будь-якій частині програми.
Приклад:
-- Поганий приклад (використання таблиці як глобальної змінної)
myGlobalTable = {
    name = "Example",
    value = 42
}

function updateGlobalTable()
    myGlobalTable.value = myGlobalTable.value + 1
end
-- Гарний приклад (використання таблиці як локальної змінної)
local my_local_table = {
    name = "Example",
    value = 42
}
function updateLocalTable()
    my_local_table.value = my_local_table.value + 1
end

Одинадцята рекомендація: Використовуйте обробки помилок
Обробка помилок у Lua охоплює кілька важливих аспектів, включаючи розуміння різних видів помилок: синтаксичних помилок, які виникають під час написання коду і потребують виправлення на етапі компіляції; логічних помилок, що є наслідком неправильних алгоритмів і вимагають тестування та налагодження; а також помилок виконання, які виникають під час роботи програми, наприклад, ділення на нуль або доступ до неіснуючого індексу таблиці. Для безпечного виклику функцій і обробки помилок без завершення програми використовуйте pcall (protected call), який повертає статус виконання та результат або повідомлення про помилку.
Приклад:
-- Поганий приклад обробки помилок: відсутня обробка помилок
function divide(a, b)
    return a / b  -- Може викликати помилку при діленні на нуль
end
local result = divide(10, 0)  -- Викликає помилку
print(result)  -- Код аварійно завершується

-- Гарний приклад обробки помилок: використання pcall для обробки помилок
function divide(a, b)
    if b == 0 then
        error("Division by zero error")  -- Генерація власної помилки
    end
    return a / b
end

Дванадцята рекомендація: Використовуйте LDoc для документування коду
Документування коду в Lua є важливою практикою для покращення зрозумілості та підтримуваності програм. Використовуйте LDoc для документування підписів функцій, зазначаючи типи параметрів і значень, що повертаються. Це допомагає іншим розробникам, а також вам самим, швидше зрозуміти, як працює ваш код, що підвищує його читабельність і зменшує ймовірність помилок у майбутньому.
Приклад:
-- Поганий приклад (відсутність документування)
function loadManifest(manifestFile)
    -- Завантаження маніфесту з файлу
    local file = io.open(manifestFile, "r")
    local content = file:read("*a")
    file:close()
    return content
end

-- Гарний приклад (документування з LDoc)
--- Завантажує маніфест з указаного файлу.
-- @param manifestFile: Ім'я файлу маніфесту (string).
-- @return Зміст маніфесту (string).
function load_manifest(manifest_file)
    local file = io.open(manifest_file, "r")
    local content = file:read("*a")
    file:close()
    return content
end

Тринадцята рекомендація: Важливо використовувати теги TODO і FIXME у коментарях
Використання тегів TODO та FIXME у коментарях є важливою практикою для управління проектами та підвищення якості коду. Тег TODO позначає функції або частини коду, які потрібно реалізувати або доробити пізніше, тоді як тег FIXME вказує на проблеми в існуючому коді, які потрібно виправити.
Приклад:
-- Поганий приклад (відсутність тегів TODO і FIXME)
function calculateArea(radius)
    -- Функція для обчислення площі круга
    return math.pi * radius^2
end

-- Гарний приклад (використання тегів TODO і FIXME)
function calculate_area(radius)
    -- TODO: Додати обробку випадків, коли radius < 0
    -- Функція для обчислення площі круга
    return math.pi * radius^2
end

function fetchData()
    -- FIXME: Виправити логіку обробки даних
    local data = {}  -- Зараз дані не обробляються
    return data
end

Чотирнадцята рекомендація: Для тестування використовуйте фреймворки, такі як LuaUnit або Busted
Для тестування коду в Lua рекомендується використовувати фреймворки, такі як LuaUnit або Busted. Ці інструменти надають прості та ефективні способи написання та виконання тестів, що допомагає забезпечити надійність і якість вашого коду.
Приклад:
-- Поганий приклад тестування
function sum(a, b)
    return a + b
end

-- Тести без використання бібліотеки
print(sum(1, 2) == 3)  -- Тестуємо, але без структурованого підходу
print(sum(-1, -1) == -2)  -- Інший тест 

--Гарний приклад тестування
local busted = require 'busted'

describe("Функція sum ", function()
    it("повинна правильно додавати позитивні числа", function()
        assert.are.equal(add(1, 2), 3)
    end)

    it("повинна правильно додавати від'ємні числа", function()
        assert.are.equal(add(-1, -1), -2)
    end)
end)

ВИСНОВКИ

Запропоновані рекомендації значно підвищують якість коду та зручність роботи з ним. По-перше, дотримання єдиного стилю форматування та відступів покращує читабельність, зменшуючи ймовірність помилок і спрощуючи внесення змін. По-друге, узгодженість у стилі написання полегшує співпрацю в командах, сприяючи ефективному обміну ідеями та виконанню код-рев'ю. Чітка структура та документація забезпечують підтримуваність, дозволяючи новим розробникам швидше розуміти логіку програми.
Крім того, модульний код спрощує тестування, знижуючи технічний борг і полегшуючи підтримку та оновлення. Оптимізація продуктивності веде до створення ефективніших рішень, а зрозумілий код приносить більше задоволення розробникам, підвищуючи їхню продуктивність. Впроваджуючи ці рекомендації, ви покращите якість свого коду та створите продуктивніше середовище для розробки, що сприятиме успішності проєктів у довгостроковій перспективі.

ДОДАТОК А
Список використаних джерел

    1. Lua-style-guide . GitHub	.URL:  https://github.com/luarocks/lua-style-guide 
(дата використання: 01.10.2024).

ДОДАТОК Б
Відео-посилання на Youtube

https://youtu.be/XvPxPpqrj28





