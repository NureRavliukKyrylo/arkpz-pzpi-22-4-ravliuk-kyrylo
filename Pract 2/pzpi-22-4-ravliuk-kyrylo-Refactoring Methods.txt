Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії





ЗВІТ
з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Методи рефакторингу коду
програмного забезпечення»





Виконав ст. гр. ПЗПІ-22-4
Равлюк Кирило Станіславович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович

Харків 2024


МЕТА РОБОТИ

Головна мета практичного заняття є вивчення та аналіз методів рефакторингу
коду, їх важливості для підтримки високої якості програмного забезпечення, а також
дослідження популярних інструментів, що сприяють автоматизації цього процесу.

ВСТУП

У сучасній розробці програмного забезпечення рефакторинг коду став
невід'ємною частиною життєвого циклу програмних проектів. Рефакторингом
називається процес вдосконалення структури та організації існуючого коду без зміни
його зовнішньої поведінки. Він передбачає застосування різноманітних методів, які
покликані підвищити читабельність, зменшити технічний борг і спростити внесення
змін. Я обрав кілька основних методів рефакторингу, таких як " Replace Magic Number
with Symbolic Constant", " Consolidate Conditional Expression" та «Rename Method». Ці
методи допомагають не лише поліпшити якість коду, а й забезпечити легкість його
підтримки в умовах динамічного розвитку технологій.
Рефакторинг коду є критично важливим аспектом сучасної розробки
програмного забезпечення, і його значення важко переоцінити. Перш за все, з огляду
на постійне ускладнення програмних проектів та швидкі зміни в вимогах, підтримка
коду в чистому, структурованому і зрозумілому стані стає надзвичайно важливою. Це
дозволяє розробникам оперативно реагувати на нові виклики, що в свою чергу
забезпечує ефективність роботи над проектами.
Використання методів рефакторингу є важлимим аспектом для розробника та
позитивно впливає на командну взаємодію. Зрозумілий і структурований код легше
читати і підтримувати, особливо для нових членів команди. Це забезпечує швидшу
адаптацію до проекту та покращує загальне розуміння його архітектури.



ХІД РОБОТИ
МЕТОДИ РЕФАКТОРИНГУ КОДУ

1. Rename method
Опис методу: важливість цього методу полягає в тому, щоб змінити назву
методу на більш зрозумілу і відповідну його функціональності. Часто програмісти
спочатку називають методи швидко або загально, але з часом стає очевидно, що назва
не відображає суті того, що метод робить. Перейменування методу допомагає зробити
код більш зрозумілим для інших розробників або для самого автора коду під час його
подальшої підтримки.
Головна перевага цього методу полягає в тому, що він не змінює логіку чи
поведінку програми, а лише покращує її зрозумілість. Коли метод має чітку і
лаконічну назву, програмістам легше зрозуміти, як і коли його використовувати, що
зменшує кількість помилок і спрощує розвиток програмного забезпечення.
Перейменування методу — це маленький, але важливий крок до створення чистого,
зрозумілого коду.
Опис проблеми: іноді назва методу не відображає його фактичного
призначення або логіки роботи, що робить код складним для розуміння. Наприклад,
метод може мати загальну або неточну назву, яка не пояснює його функціональність.
Це може спричинити плутанину для інших розробників або навіть для автора коду в
майбутньому.

Приклад:
# Код до рефакторингу
class Order:
def t(self):
# Розрахунок загальної суми замовлення
total = 0
for item in self.items:
total += item.price * item.quantity
return total


def calc(self, price, discount):
# Розрахунок знижки замовлення
return price - (price * discount)

# Код після рефакторингу
class Order:
def calculate_total(self):
# Розрахунок загальної суми замовлення
total = 0
for item in self.items:
total += item.price * item.quantity
return total

def calculate_discounted_price(self, price, discount):
# Розрахунок знижки замовлення
return price - (price * discount)

Переваги отриманого коду після застосування методу включають покращену
читабельність, оскільки назва методу чітко відображає його функцію — розрахунок
зниженої ціни та загальної суми замовлення. Це також підвищує зрозумілість для
інших розробників або нових учасників команди, які можуть без зусиль зрозуміти,
яку функцію виконує цей метод, не вникаючи в його реалізацію. Крім того,
перейменування методу зменшує плутанину, знижуючи ймовірність неправильного
використання або помилкового трактування його призначення.

2. Replace Magic Number with Symbolic Constant
Опис: метод рефакторингу, що передбачає заміну незрозумілих числових
значень (так званих «магічних чисел») на зрозумілі символічні константи. Магічні
числа в коді можуть бути важко зрозумілими, особливо якщо вони використовуються
багаторазово і не мають очевидного пояснення. Наприклад, замість того, щоб писати
умову if (speed > 18), краще використовувати константу MAX_HIGHWAY_SPEED =
18, що надає чіткого сенсу значенню числа. Це не тільки робить код більш



читабельним, але й спрощує майбутні зміни — якщо зміниться максимальна
швидкість, достатньо буде змінити значення константи в одному місці.
Цей метод значно покращує підтримку коду, оскільки символічні константи
надають ясний контекст і допомагають уникати помилок при оновленні чи
масштабуванні системи. Крім того, використання констант дозволяє уникати
дублювання однакових значень по всьому коду, що робить програму більш
узгодженою та структурованою.
Опис проблеми: уявімо, що ми працюємо над проектом, який пов’язаний із
обробкою замовлень в онлайн-магазині. У коді використовуються «магічні числа» для
визначення знижок, що ускладнює підтримку та модифікацію. Наприклад, у нас є
різні знижки для товарів, які надаються у вигляді незрозумілих чисел без пояснення.
Це може призвести до помилок, якщо розробники не знають, що означають ці числа
Приклад:
# Код до рефакторингу
class Order:
def calculate_final_price(self, base_price, category):
if category == 'goods':
discount = base_price * 0.1

# 10% знижка

elif category == 'cloth':
discount = base_price * 0.2

# 20% знижка

elif category == 'devices':
discount = base_price * 0.15

# 15% знижка

else:
discount = 0

final_price = base_price - discount
return final_price

# Код після рефакторингу
class Order:
ELECTRONICS_DISCOUNT = 0.1

# 10% знижка

CLOTHING_DISCOUNT = 0.2

# 20% знижка


BOOKS_DISCOUNT = 0.15

# 15% знижка

def calculate_final_price(self, base_price, category):
if category == 'goods':
discount = base_price * self.ELECTRONICS_DISCOUNT
elif category == 'cloth':
discount = base_price * self.CLOTHING_DISCOUNT
elif category == 'devices':
discount = base_price * self.BOOKS_DISCOUNT
else:
discount = 0

final_price = base_price - discount
return final_price

Переваги отриманого коду після застосування методу включають покращену
читабельність, оскільки назви констант чітко вказують на те, що означають ці
значення, наприклад, знижки для різних категорій. Це також забезпечує легкість у
підтримці, оскільки, якщо знижки зміняться, розробник може швидко оновити лише
значення константи, не витрачаючи час на пошук усіх місць у коді, де
використовується "магічне число". Крім того, зменшується ймовірність помилок:
завдяки описовим назвам констант ризик неправильного використання значень
знижується, адже вони стають більш зрозумілими.

3. Consolidate Conditional Expression
Опис: метод рефакторингу, що дозволяє об'єднати кілька умов в один логічний
вираз або винести їх в окрему функцію. Часто в коді зустрічаються ситуації, коли
однакові або схожі умовні вирази використовуються в різних місцях. Це робить код
складнішим для розуміння і підтримки. За допомогою цього методу всі ці умови
можна звести до одного виразу, що зменшить дублювання коду та зробить його більш
читабельним.

Опис проблеми: уявімо, що ми розробляємо програму для управління
користувачами в корпоративній системі. В даному коді існує кілька умовних виразів,
які перевіряють статус користувача та виконують різні дії на основі цього статусу.
Використання декількох умов у різних частинах програми призводить до дублювання
коду та ускладнює його підтримку. Ця ситуація робить код заплутаним і важким для
розуміння.

Приклад:
# Код до рефакторингу
class User:
def __init__(self, login, status,valid):
self.name = login
self.status = status
self.valid = valid

class UserManager:
def notify_user(self, user):
if user.valid:
if user.status == 'admin':
print(f"Notify {user.login}: You are admin.")
elif user.status == 'editor':
print(f"Notify {user.login}: You can edit posts.")
elif user.status == 'viewer':
print(f"Notify {user.login}: You are viewer.")
else:
print(f"Notify {user.login}: Your account is inactive.")

class User:
def __init__(self, login, status, valid):
self.name = login
self.status = status
self.valid = valid

# Код після рефакторингу


class UserManager:
def notify_user(self, user):
if user.valid:
message = self.get_role_message(user)
print(f"Notify {user.login}: {message}")
else:
print(f"Notify {user.login}: Your account is inactive.")

def get_role_message(self, user):
role_messages = {
'admin': "You are admin.",
'editor': "You can edit posts.",
'viewer': "You are viewer."
}
return role_messages.get(user.status, "Role not recognized.")

Переваги отриманого коду після застосування методу включають зменшення
дублювання, оскільки умови для ролі користувача зібрані в окремій функції, що
усуває повторювані блоки коду. Це також покращує читабельність: код став легшим
для розуміння, оскільки основна логіка сповіщення зосереджена в одному місці, а
деталі визначення повідомлень винесені в окрему функцію. Крім того, легкість у
підтримці є важливою перевагою: якщо знадобиться змінити повідомлення для
певної ролі, це можна зробити в одній точці, а не в декількох місцях коду. Це зменшує
ризик помилок і спрощує внесення змін у майбутньому.



ІНСТРУМЕНТИ РЕФАКТОРИНГУ КОДУ

У світі програмного забезпечення існує безліч інструментів для рефакторингу
коду, які стають на допомогу розробникам у підтримці високої якості та ефективності
проектів. Серед найпопулярніших — середовище розробки JetBrains IDE, яке
пропонує вражаючий набір функцій для автоматизації процесу рефакторингу. Його
інтуїтивно зрозумілий інтерфейс дозволяє легко здійснювати автоматичне
перейменування змінних, методів і класів, знижуючи ризик помилок під час
редагування коду.
Не менш потужним є Visual Studio, що широко застосовується для розробки на
C# та інших мовах програмування. Це середовище надає функції для рефакторингу
коду, включаючи виявлення дублікатів і рекомендації щодо вдосконалення структури.
Інтуїтивний інтерфейс дозволяє візуалізувати внесені зміни, покращуючи зручність
роботи з проектами.
Eclipse — ще одне відоме середовище, яке забезпечує розробників потужними
інструментами для рефакторингу, такими як об'єднання та розділення класів,
редагування методів. Завдяки підтримці численних плагінів Eclipse може бути
адаптовано під специфічні потреби проектів, що робить його універсальним
рішенням для багатьох команд. Простий у використанні інтерфейс і різноманітні
функції рефакторингу роблять Eclipse ідеальним вибором для розробників, які
працюють над великими проектами.
Не можна не згадати про SonarQube — інструмент, який зосереджується на
аналізі якості коду та виявленні технічного боргу. SonarQube дозволяє командам
виявляти проблеми, що можуть заважати рефакторингу, і тим самим забезпечує
систематичний підхід до підвищення якості програмного забезпечення. Він чудово
доповнює IDE, пропонуючи додаткові можливості для аналізу та звітності.
І, звісно ж, варто згадати про GitHub Copilot — інструмент, що використовує
штучний інтелект для полегшення процесу написання коду. Хоча його основна
функція полягає у генерації коду, Copilot також здатний рекомендувати способи
рефакторингу, спрощуючи процес внесення змін у проекти. Цей інструмент може
значно підвищити продуктивність розробників, пропонуючи релевантні фрагменти
коду та покращення на основі контексту.



ВИСНОВКИ

Рефакторинг є основним елементом у розробці програмного забезпечення, адже
він забезпечує підтримку високої якості коду протягом всього життєвого циклу
проекту. Регулярне вдосконалення та переписування частин коду дозволяє зберігати
його чистим, зрозумілим і легким для підтримки, що є особливо важливим у світі, де
вимоги постійно змінюються, а технології швидко розвиваються.
Процес рефакторингу допомагає виявляти та усувати потенційні проблеми,
зменшувати технічний борг, підвищувати читабельність коду та спрощувати внесення
змін. Підтримка чистоти структури коду також полегшує адаптацію нових
розробників до проекту, що позитивно впливає на загальну продуктивність команди.
Важливо знати, коли і як слід застосовувати методи рефакторингу. По-перше,
перед додаванням нових функцій варто провести рефакторинг, щоб підготувати код
до подальших доповнень, роблячи його більш зрозумілим. По-друге, після виявлення
помилок доцільно переглянути та переписати відповідні частини коду, щоб уникнути
повторення подібних проблем у майбутньому. І, по-третє, після завершення великих
змін у коді необхідно провести ревізію, щоб поліпшити його читабельність і
структуру, що в результаті сприяє підтримці високої якості програмного
забезпечення.



ДОДАТОК А
Список використаних джерел

1. Fowler, M. Refactoring: Improving the Design of Existing Code. – Addison- Wesley,
1999. – 464 с.
2. Martin, R. C. Clean Code: A Handbook of Agile Software Craftsmanship. – Prentice
Hall, 2008. – 462 с.



ДОДАТОК Б
Відео-посилання на Youtube

https://youtu.be/maCie-pBegQ



ДОДАТОК В
Скриншоти презентації

